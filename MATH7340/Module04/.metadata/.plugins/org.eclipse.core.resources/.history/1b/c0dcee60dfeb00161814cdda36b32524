# TODO: Add comment
# 
# Author: lenovo
###############################################################################


# problem 1

# mean = 5
# var = 0.6*sqrt(5)

# No, we can't.
#x <- matrix(rnorm(5*10000, mean=5, sd=3), nrow =10000)
#mean.x <- apply(x, 1, mean)
#mean( (2<mean.x) & (mean.x<5.1))

# problem 2
rm(list=ls())
meanX <- 20*0.7
VarX <- 20*0.7*0.3
print(1-pnorm(15, mean=meanX, sd=sqrt(VarX)/10))

# problem 3
# one loop
rm(list=ls())
require(mvtnorm)
sim <- 100000
blah <- rep(NA, sim)
for (i in 1:sim){
	matrix <- rmvnorm(50, mean=c(9,10), sigma=matrix(c(3,2,2,5), nrow=2))
	meanX <- mean(matrix[,1])
	meanY <- mean(matrix[,2])
	blah[i] <- meanX + 0.5 < meanY
}
p <- mean(blah)
print(p)
print( p + c(-1, 1)*1.96*sqrt(var(blah)/sim))

# two loops
rm(list=ls())
require(mvtnorm)
sim <- 1000
res <- rep(NA, sim)
n <- 100
zeroOnes <- rep(NA, n)
for (i in 1:sim){
	for (j in 1:n){
		matrix <- rmvnorm(50, mean=c(9,10), sigma=matrix(c(3,2,2,5), nrow=2))
		meanX <- mean(matrix[,1])
		meanY <- mean(matrix[,2])
		zeroOnes[j] <- meanX + 0.5 < meanY
	}
	p <- mean(zeroOnes)
	res[i] <- p
}
print( mean(res) )
print( mean(res) + c(-1, 1)*1.96*sqrt(var(res)/sim))

# theoretical
1-pnorm(0.5, 1, sqrt(0.08))


# problem 4
x1 <- rchisq(100000, df = 10)
x2 <- rgamma(100000, shape = 1, scale = 2)
x3 <- rt(100000, df = 3)
y <- sqrt(x1)*x2+4*(x3^2)
print(mean(y))

# theoretical
Esqrtx1 <- integrate(function(x) sqrt(x)*dchisq(x, df = 10), lower=0, upper=Inf)$value
Ex2 <- 1*2
Esquarex3 <- integrate(function(x) x^2 *dt(x, df = 3), lower=-Inf, upper=Inf)$value
Ey <- Esqrtx1*Ex2 + 4*Esquarex3
print(Ey)

# percentage error
print(  abs(mean(y)-Ey)/Ey * 100  ) 

# problem 5
rm(list=ls())
n <- 1000
a <- function(n) {sqrt(2*log(n)) - 0.5*(log(log(n)) + log(4*pi)) * (2*log(n))^(-1/2)}
b <- function(n) {(2*log(n))^(-1/2)}
an <- a(n)
bn <- b(n)
res <- rep(NA, n)
for (i in 1:n){
	res[i] = (max(rnorm(n, 0, 1))-an)/bn
}
plot(density(res), ylim=c(0,0.5), xlab="range of X", main="Extreme Value investigation")
f <- function(x) {exp(-x)*exp(-exp(-x))}
curve(f, range(density(res)$x), add=TRUE, col = "blue")
curve(dnorm, add=TRUE, col = "red")
legend(1.5,0.5, c("generated extreme data", "extreme value", "normal distribution"), lty = "solid", col = c("black","blue","red"))
# The extreme value fits to the density of generated extreme data much better than 
# the red line
